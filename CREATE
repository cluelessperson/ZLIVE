#!/bin/bash
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi
[ -z "$1" ] && echo "Usage: $0 <name>" && exit
clear

overwrite() {
    while read i; do
        echo -ne "\033[2K"
        echo -ne "\r$i"
    done
    echo ""
}

echo "#"
echo "#     Configuration..."
echo "#"
export base="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export name="$1""_"$(date +"%Y.%m.%d")
export build="$base/BUILDS/$name"
export cache="$build/packages.tar"
export config="$base/CONFIGS/$1"
export chroot="$build/chroot/"
export setup_script="$build/setup_script"
export iso="$build/$name"".iso"
echo "BASE:         $base"
echo "CONFIG:       $config"
echo "BUILD:        $build"
echo "CACHE:        $cache"
echo "CHROOT:       $chroot"
echo "SETUP_SCRIPT: $setup_script"
echo "ISO:          $iso"

umount -lf $chroot/{proc,sys,dev/pts}

rm -rf "$build/binary" "$chroot"
mkdir -p "$build"

echo
echo "#"
echo "#     Checking/Installing prerequisites..."
echo "#"
apt-get update -yqq | overwrite
apt-get install -yqq --no-install-recommends debootstrap live-build syslinux isolinux syslinux-common squashfs-tools xorriso | overwrite

echo
echo "#"
echo "#    Bootstrapping base system..."
echo "#"
if [ ! -f "$cache" ]; then
    echo
    echo "#Creating package cache..."
    debootstrap --arch=amd64 --variant=minbase --make-tarball="$cache" jessie "$chroot" | overwrite
fi
echo
echo "#Installing packages in '$chroot' ..."
debootstrap --arch=amd64 --variant=minbase --unpack-tarball="$cache" jessie "$chroot" | overwrite
echo

echo "#Creating base_setup_script ..."
cat <<EOF > "$build/setup_script"
overwrite() {
    while read i; do
        echo -ne "\033[2K"
        echo -ne "\r$i"
    done
    echo ""
}
mount none -t proc /proc
mount none -t sysfs /sys
mount none -t devpts /dev/pts
export HOME=/root
export LC_ALL=C
export PS1="\e[01;31m(live):\W \$ \e[00m"
export DEBIAN_FRONTEND=noninteractive

cat <<EOSF > /etc/apt/sources.list
deb http://ftp.us.debian.org/debian/ stable main contrib
deb http://ftp.us.debian.org/debian/ stable-updates main contrib
deb http://security.debian.org/ stable/updates main
EOSF
apt-get update -yqq
apt-get install -yqq --no-install-recommends apt-utils
apt-get install -yqq --no-install-recommends dialog dbus linux-image-amd64 live-boot syslinux nano
dbus-uuidgen > /var/lib/dbus/machine-id

echo "127.0.0.1 $1" >> /etc/hosts
echo "$1" > /etc/hostname
echo "" > /etc/motd
rm /var/lib/dbus/machine-id
sed -i '/#kernel.printk = 3 4 1 3/s/^#//g' /etc/sysctl.conf
EOF

cat "$config" >> "$build/setup_script"

cat <<EOF >> "$build/setup_script"
apt-get autoremove -yqq
apt-get clean -yqq
#rm -rf /usr/share/locale/{uk,fr,pl,vi,nl,cs,de,sv,ru,es,da,it,ja,ca,hu,zh_CN,tr,eo,id,bg,sl,sk,pt,pt_BR,fi,nb,zh_TW,et,el,ro,gl,th,eu,ga,sr,ko,lg,dz,km,ne,mr,hr,lt,ast,tl,nn,ms,kk,be}
rm -r /var/lib/apt/lists/*
rm -rf /var/lib/dbus/machine-id
rm -rf /tmp/*
exit

EOF

cat "$build/setup_script" | chroot "$chroot"
umount -lf $chroot/{proc,sys,dev/pts}

echo
echo "#"
echo "#     Wrapping up..."
echo "#"
echo
mkdir -p "$build/binary/"{live,isolinux}
mksquashfs "$chroot" "$build/binary/live/filesystem.squashfs" \
    -e boot \
    -b 4096 \
    -comp xz \
    -Xdict-size 100%
echo "#make bootable..."
cp $chroot/boot/vmlinuz-* "$build/binary/live/vmlinuz"
cp $chroot/boot/initrd.img-* "$build/binary/live/initrd"
cp /usr/lib/syslinux/modules/bios/ldlinux.c32 "$build/binary/isolinux/"
cp "/usr/lib/ISOLINUX/isolinux.bin" "$build/binary/isolinux/"

cat <<EOF > "$build/binary/isolinux/isolinux.cfg"
#timeout 100
default linux
label linux
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live toram=filesystem.squashfs
EOF
echo "#wrap into iso..."
xorriso \
    -as mkisofs -r -J -joliet-long -l \
    -isohybrid-mbr "/usr/lib/ISOLINUX/isohdpfx.bin" \
    -partition_offset 16 \
    -A "$name" \
    -b isolinux/isolinux.bin \
    -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table \
    -o "$build/$name.iso" \
    "$build/binary"

du -sh "$build/$name.iso"
